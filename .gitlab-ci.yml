variables:
#  CI_DEBUG_TRACE: "true"

before_script:
  - echo "*** Setup access credentials"
  - mkdir ~/.aws
  - echo "${AWS_config}"      > ~/.aws/config
  - echo "${AWS_credentials}" > ~/.aws/credentials
  - '$(aws ecr get-login --no-include-email)'  

build:
  stage: build
  when: manual
  image: 422207425354.dkr.ecr.ap-southeast-2.amazonaws.com/docker-aws:latest
  tags:
    - worker
  script:
    - echo "*** Prepare a file(s)"
    - echo "${WP_CONFIG}" > ./wp-config.php
    - cat ./wp-config.php
    - tar cf ./docker.tar ./ --exclude=docker.tar
    - echo "*** Build a image"
    - docker build -t "${IMAGE}" . 
    - echo "*** Push a image to registry"
    - docker push "${IMAGE}"

deploy-ECS:
  stage: deploy
  when: manual
  image: 422207425354.dkr.ecr.ap-southeast-2.amazonaws.com/docker-aws:latest
  tags:
    - worker
  script:
    ecs-deploy --use-latest-task-def --cluster "${ECS_CLUSTER}" --service-name "${ECS_SERVICE}" --image "${IMAGE}" --timeout 600

backup-mysql:
  stage: build
  when: manual
  image: 422207425354.dkr.ecr.ap-southeast-2.amazonaws.com/docker-aws:latest
  tags:
    - worker
  script:
    - echo "*** Do a datanbase backup"
    - mysqldump --default-character-set=binary -h$WP_DB_HOST -u$WP_DB_USER -p$WP_DB_PASSWORD $WP_DB_BASE | mysqldump --default-character-set=binary -h$WP_DB_HOST_BACKUP -u$WP_DB_USER_BACKUP -p$WP_DB_PASSWORD_BACKUP -D $WP_DB_BASE_BACKUP
